# Report de Desenvolvimento

## 1. Identificação do Projeto

- **Nome da Empresa:** Flare Dynamic Art
- **Nome do Projeto:** TRAIL OF ALYA
- **Responsável:**
    * Arthur Alberto Cardoso Reis
    * Felipe Gomes Rodrigues Dos Santos
    * Kil Matheus Gomes Teixeira
    * Leandro de Oliveira Custodio

- **Data:** 25/06/2025  
- **Versão do Documento:** 1.0  

## 2. Resumo Executivo

Este report documenta o progresso no desenvolvimento focado na criação do jogo, após o passo de idealização realizado no Módulo passado, em conjunto com a continuação da documentação da empresa. Os tópicos de desenvolvimento principais abordados foram a criação dos Tilesets do Jogo (2D), Modelagem e Animações 3D, Efeitos Sonoros, Músicas, criação da Boss Figth assim como a progamação, em conjunto com atualização das documentações como GDD e Estruturação da Empresa. Também a aplicação de uma nova reorganização de validações de desenvolvimento, incluindo as criações de atas de reuniões.

## 3. Objetivos

- Programação da criação Procedural de Salas .
- Desenvolvimento dos Tilesets (Paredes, Chão, Estantes, Portas, Velas e Livros).
- Modelagem e Animações 3D (Alya e Hug).
- Game Design.
- Efeitos Sonoros.
- Músicas.
- Boss Figth - Documentação.
- Boss Figth - Programação.
- Atualização dos Documentos GDD e Estruturação da Empresa.


## 4. Desenvolvimento Realizado

### 4.1 Atividades Concluídas

**Arte e Modelagem**

* Criação dos Tilesets 2D:

  * Paredes
  * Chão
  * Estantes
  * Portas
  * Velas
  * Livros
* Modelagem 3D dos personagens:

  * Alya (protagonista)
  * Hug (inimigo)
* Animações 3D para Alya e Hug
* Modelagem das salas do jogo

**Interface (HUD e UI)**

* Criação de sprites da HUD:

  * Botão
  * Barra de vida (Boss e Protagonista)
  * Magazine de armas
  * Magazine de objetos
* Alterações e ajustes nas sprites da HUD

**Programação**

* Lógica de criação procedural de salas:
Uso de matrizes para o controle de instancia de cada sala, evitando que 2 salas sejam instanciadas no mesmo local.

Implementação de logica de criação de portas de acordo com as salas concatenadas, impedindo que portas que não levam a nenhuma sala sejam criadas.

Inserção de objetos e inimigos nas salas.

* Sistema de maquina de estados
Utilizado para gerir os movimentos do player e dos inimigos do jogo de forma dinamica, utilizando gatilhos específicos para realizar a troca de estado, aos quais contem lógicas que definem o comportamento da entidade de acordo com o atual estado.

* Implementação do inimigo Hug:
Primeira integração dos modelos 3d com o cenário 2d do jogo

* lógica de tiro e troca de armas
Foram implementadas
- Arma lazer que dispara projeteis retos, que são destruídos ao encostar em qualquer superfície ou entidade
- Arma de bumerangue, o qual pode ser lançado no cenário para acertar os inimigos multiplas vezes, até retornar a mão do jogador. Podem ser instanciadas até 2 bumerangues por vez na cena.

* Programação do sistema de combos encadeados
Sistema de controle de combos, o qual permite inserir sequencias de golpes ao jogador, possibilitando alterações de parâmetros a cada golpe consecutivo, como dano, knockback, alcance etc.

* Programação da Boss Fight 
Uso de maquina de estados para administrar os movimentos e reações do boss de acordo com o momento da batalha, utilizando identificadores diversos como condições de transição, permitindo que o comportamento do boss seja alterado a cada troca de estado.

Criação de ataques do boss:
- Dash que deixa pedaços de cera derretida, que aplicam lentidão ao jogador, caso o mesmo encoste com o objeto
- ataque de bolas de fogo, o qual o boss fica parado e lança diversos projeteis que caem do céu, aplicando um efeito de dano contínuo, tem o feedback visual de aplicar chamas no corpo do jogador, enquanto o efeito persiste
- ataque de tiro, funcionando de forma similar ao ataque de tiro do player, mas com uma cadencia maior

* Hud
- Implementação de barra de vida do player e do boss
- Implementação de roda de armas, indicador que mostra qual arma esta sendo utilizada pelo player

* Menus
- Implementação de menu inicial
- Implementação de menu de pausa
- Implementação de menu de game over

* Sistema de coleta de itens
O sistema de coleta de itens inclui
- Baú que pode aparecer nas salas contendo ítens diversos
- Itens de recuperação de vida
- Itens de recuperação de munição

* Movimentação e ataques de defesa
- Movimentação do jogador
- Habilidade de dash, que permite o jogador criar um impulso
- Habilidade de escudo, o qual cria um campo eletrico envolta do jogador, que reflete balas e causa dano aos inimigos que entrarem em contato

* Shaders
- Criação de sistema de iluminação global, que afeta o ataque de chamas do boss e o ataque de magia do player
- Efeito de Ghost, o qual cria diversas copias de um objeto e o instancia em seu local atual, utilizado no dash e no bumerangue, para passar uma ideia de movimento rapido
- Efeito de chamas utilizando um sistema de geração de particulas em tempo real, utilizado em ataques do boss
- animações de impacto, como a explosão do tiro ao encostar  na superficie, fumaça ao derrotar um inimigo etc. 

**Design de Áudio**

* Criação de músicas originais
* Desenvolvimento de efeitos sonoros

**Design de Jogo**

* Desenvolvimento e documentação da Boss Fight
* Atualização do GDD (Game Design Document)
* Pesquisa de mercado para embasamento do projeto

**Estrutura Organizacional e Documentação**

* Atualização do documento de estruturação da empresa (governança)
* Criação de atas de reuniões para validação do desenvolvimento
* Versão inicial do Pitch do projeto

**Marketing e Comunicação**

* Desenvolvimento das redes sociais
* Criação de um site institucional para o projeto
 

### 4.2 Tecnologias Utilizadas

- **Documentação:** Google Sheets e Docs
- **Desenhos:** Feito a mão e digitalizado usando o aplicativo Sketchbook (Android e IOS).
- **TilesSets** Feito com o Aseprite e Piskel
- **Modelagens** BlockBench e Blender
- **Arte Sonora**: Gravada no programa Reaper utilizando um Roland-GO:Piano como input MIDI
- **Comunicação:** Google Meet e Slack
- **Programação do jogo** Godot Engine 4.3
- **Programação do Site institucional** React + Vite com Typecript

## 5. Desafios e Soluções

### 5.1 Dificuldades na Produção Artística

Durante o processo de criação da arte do jogo, surgiram desafios relacionados ao domínio de ferramentas e técnicas específicas.
**Solução:** Foram realizados estudos autônomos por meio de tutoriais no YouTube e troca de conhecimentos com colegas da equipe, o que contribuiu para a superação das dificuldades e melhoria na qualidade da arte produzida.

### 5.2 Esquecimento de Conteúdos Discutidos nas Reuniões

Houve dificuldades em relembrar os assuntos tratados e as decisões tomadas nas reuniões de equipe.
**Solução:** Foi implementado o uso sistemático de atas de reunião, com registros organizados e compartilhados entre os membros, garantindo histórico e alinhamento.

### 5.3 Interferência Indevida Entre Áreas de Trabalho

Alguns membros realizavam alterações que impactavam diretamente o trabalho de outros sem a devida comunicação, gerando retrabalho e desalinhamentos.
**Solução:** Foi adotado um novo método de validação interna, com maior controle e organização dos fluxos de trabalho, permitindo que cada membro atue dentro de sua área com validações bem definidas e sem interferência indevida.

## 6. Próximos Passos

- Testes e validações com usuários.
- Refinamento mediante Feedbacks do Jogo.
- Definir pitch para apresentação em rodadas de negócios e de parceiros.

## 7. Considerações Finais

O projeto avançou significativamente, permitindo a criação de uma base sólida para o jogo. Além disso, estamos em busca de aprimorar a qualidade tanto do desenvolvimento quanto da gestão do projeto, com o objetivo de, futuramente, atrair investidores interessados em apoiar nosso crescimento.
